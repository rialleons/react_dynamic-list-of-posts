{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm.tsx","api/comment.ts","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","api/user.ts","api/post.ts","index.tsx"],"names":["PostsList","posts","chosenPost","setChosenPost","className","map","post","id","title","type","classNames","onClick","handlePostChoosing","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","initialComment","name","email","initialErrors","nameError","emailError","bodyError","NewCommentForm","chosenPostId","addNewComment","useState","newComment","setNewComment","errors","setErrors","isSubmitting","setIsSubmitting","isSubmittingError","setIsSubmittingError","handleChange","event","fieldName","target","fieldValue","value","fieldErrorName","onSubmit","preventDefault","postId","commentData","trimmedName","trim","trimmedEmail","trimmedBody","trimmedComment","currentErrors","Date","catch","finally","onReset","htmlFor","placeholder","onChange","PostDetails","comments","setComments","isCommentsError","setIsCommentsError","isDeleteError","setIsDeleteError","isLoadingComments","setIsLoadingComments","isEditingComment","setIsEditingComment","useEffect","handleRemoveComment","deleteId","commentId","filter","comment","length","href","UserSelector","users","selectedUser","setSelectedUser","isSelectingUser","setIsSelectingUser","role","user","handleUserSelect","App","setUsers","setPosts","isUserLoadingError","setIsUserLoadingError","isPostsLoadingError","setIsPostsLoadingError","isPostsLoading","setIsPostsLoading","userId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4d9fdc96.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\n\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[],\n  chosenPost: Post | null,\n  setChosenPost: React.Dispatch<Post | null>\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  chosenPost,\n  setChosenPost,\n}) => {\n  const handlePostChoosing = (post: Post) => {\n    if (post.id === chosenPost?.id) {\n      setChosenPost(null);\n    } else {\n      setChosenPost(post);\n    }\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr\n              key={post.id}\n              data-cy=\"Post\"\n            >\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames('button is-link', {\n                    'is-light': post.id !== chosenPost?.id,\n                  })}\n                  onClick={() => handlePostChoosing(post)}\n                >\n                  {post.id !== chosenPost?.id ? 'Open' : 'Close'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\n\nimport { Comment, CommentData } from '../types/Comment';\nimport { CommentError } from '../types/CommentError';\nimport { createComment } from '../api/comment';\n\nconst initialComment: CommentData = {\n  name: '',\n  email: '',\n  body: '',\n};\n\nconst initialErrors: CommentError = {\n  nameError: false,\n  emailError: false,\n  bodyError: false,\n};\n\ntype Props = {\n  chosenPostId: number,\n  addNewComment: (comment: Comment) => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  chosenPostId,\n  addNewComment,\n}) => {\n  const [newComment, setNewComment] = useState<CommentData>(initialComment);\n  const [errors, setErrors] = useState(initialErrors);\n\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isSubmittingError, setIsSubmittingError] = useState(false);\n\n  const handleChange = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    const fieldName = event.target.name;\n    const fieldValue = event.target.value;\n    const fieldErrorName = `${fieldName}Error`;\n\n    setNewComment({\n      ...newComment,\n      [fieldName]: fieldValue,\n    });\n\n    setErrors({\n      ...errors,\n      [fieldErrorName]: false,\n    });\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const { name, email, body } = newComment;\n\n    const trimmedName = name.trim();\n    const trimmedEmail = email.trim();\n    const trimmedBody = body.trim();\n\n    const trimmedComment: CommentData = {\n      name: trimmedName,\n      email: trimmedEmail,\n      body: trimmedBody,\n    };\n\n    if (!trimmedName) {\n      setErrors((currentErrors) => {\n        return {\n          ...currentErrors,\n          nameError: true,\n        };\n      });\n    }\n\n    if (!trimmedEmail) {\n      setErrors((currentErrors) => {\n        return {\n          ...currentErrors,\n          emailError: true,\n        };\n      });\n    }\n\n    if (!trimmedBody) {\n      setErrors((currentErrors) => {\n        return {\n          ...currentErrors,\n          bodyError: true,\n        };\n      });\n    }\n\n    if (trimmedName && trimmedEmail && trimmedBody) {\n      setIsSubmitting(true);\n\n      createComment(chosenPostId, trimmedComment)\n        .then(() => {\n          addNewComment({\n            ...trimmedComment,\n            postId: chosenPostId,\n            id: +new Date(),\n          });\n          setNewComment({\n            ...newComment,\n            body: '',\n          });\n        })\n        .catch(() => {\n          setIsSubmittingError(true);\n          setTimeout(() => {\n            setIsSubmittingError(false);\n          }, 3000);\n        })\n        .finally(() => setIsSubmitting(false));\n    }\n  };\n\n  const handleReset = () => {\n    setNewComment(initialComment);\n    setErrors(initialErrors);\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n      onReset={handleReset}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', {\n              'is-danger': errors.nameError,\n            })}\n            value={newComment.name}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {errors.nameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errors.nameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': errors.emailError,\n            })}\n            value={newComment.email}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {errors.emailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errors.emailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': errors.bodyError,\n            })}\n            value={newComment.body}\n            onChange={handleChange}\n          />\n        </div>\n\n        {errors.bodyError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', {\n              'is-loading': isSubmitting,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button type=\"reset\" className=\"button is-link is-light\">\n            Clear\n          </button>\n        </div>\n      </div>\n      {isSubmittingError && (\n        <div className=\"notification is-danger\">\n          Unable to send a comment\n        </div>\n      )}\n    </form>\n  );\n};\n","import { Comment, CommentData } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport function getPostComments(postId: number) {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n}\n\nexport function createComment(postId: number, commentData: CommentData) {\n  return client.post<Comment>('/comments', { postId, ...commentData });\n}\n\nexport function removeComment(commentId: number) {\n  return client.delete(`/comments/${commentId}`);\n}\n","import React, { useEffect, useState } from 'react';\n\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { getPostComments, removeComment } from '../api/comment';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  chosenPost: Post,\n};\n\nexport const PostDetails: React.FC<Props> = ({ chosenPost }) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n\n  const [isCommentsError, setIsCommentsError] = useState(false);\n  const [isDeleteError, setIsDeleteError] = useState(false);\n\n  const [isLoadingComments, setIsLoadingComments] = useState(false);\n  const [isEditingComment, setIsEditingComment] = useState(false);\n\n  useEffect(() => {\n    setIsEditingComment(false);\n    setIsCommentsError(false);\n    setIsLoadingComments(true);\n\n    getPostComments(chosenPost.id)\n      .then(setComments)\n      .catch(() => setIsCommentsError(true))\n      .finally(() => setIsLoadingComments(false));\n  }, [chosenPost.id]);\n\n  const handleNewComment = () => {\n    setIsEditingComment(true);\n  };\n\n  const handleAddingNewComment = (newComment: Comment) => {\n    setComments([\n      ...comments,\n      newComment,\n    ]);\n  };\n\n  const handleRemoveComment = (deleteId: number) => {\n    setComments(comments.filter(comment => comment.id !== deleteId));\n\n    removeComment(deleteId)\n      .catch(() => {\n        setIsDeleteError(true);\n        setTimeout(() => {\n          setIsDeleteError(false);\n          setComments([...comments]);\n        }, 3000);\n      });\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${chosenPost.id}: ${chosenPost.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {chosenPost.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoadingComments && (\n            <Loader />\n          )}\n\n          {isCommentsError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Unable to load comments\n            </div>\n          )}\n\n          {!comments.length ? (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          ) : (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n\n              {comments.map(comment => (\n                <article\n                  key={comment.id}\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                >\n                  <div className=\"message-header\">\n                    <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                      {comment.name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => handleRemoveComment(comment.id)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {comment.body}\n                  </div>\n                </article>\n              ))}\n            </>\n          )}\n\n          {isDeleteError && (\n            <div className=\"notification is-danger\">\n              Unable to delete a comment\n            </div>\n          )}\n\n          {!isEditingComment && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={handleNewComment}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isEditingComment && (\n          <NewCommentForm\n            chosenPostId={chosenPost.id}\n            addNewComment={handleAddingNewComment}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\n\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[],\n  selectedUser: User | null,\n  setSelectedUser: React.Dispatch<User>,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUser,\n  setSelectedUser,\n}) => {\n  const [isSelectingUser, setIsSelectingUser] = useState(false);\n\n  const handleUserSelector = () => {\n    setIsSelectingUser(!isSelectingUser);\n  };\n\n  const handleUserSelect = (user: User) => {\n    setSelectedUser(user);\n    setIsSelectingUser(false);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', {\n        'is-active': isSelectingUser,\n      })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={handleUserSelector}\n        >\n          <span>\n            {selectedUser ? selectedUser.name : 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div\n        className=\"dropdown-menu\"\n        id=\"dropdown-menu\"\n        role=\"menu\"\n      >\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className={classNames('dropdown-item', {\n                'is-active': user.id === selectedUser?.id,\n              })}\n              onClick={() => handleUserSelect(user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { getUserPosts } from './api/post';\nimport { getUsers } from './api/user';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [chosenPost, setChosenPost] = useState<Post | null>(null);\n\n  const [isUserLoadingError, setIsUserLoadingError] = useState(false);\n  const [isPostsLoadingError, setIsPostsLoadingError] = useState(false);\n  const [isPostsLoading, setIsPostsLoading] = useState(false);\n\n  useEffect(() => {\n    getUsers()\n      .then(setUsers)\n      .catch(() => {\n        setIsUserLoadingError(true);\n      });\n  }, []);\n\n  useEffect(() => {\n    if (selectedUser) {\n      setChosenPost(null);\n      setIsPostsLoadingError(false);\n      setIsPostsLoading(true);\n\n      getUserPosts(selectedUser.id)\n        .then(setPosts)\n        .catch(() => setIsPostsLoadingError(true))\n        .finally(() => setIsPostsLoading(false));\n    }\n  }, [selectedUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  setSelectedUser={setSelectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && !isUserLoadingError && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isUserLoadingError && (\n                  <div className=\"notification is-danger\">\n                    Unable to load users.\n                    Please, check your connection and reload page.\n                  </div>\n                )}\n\n                {selectedUser && (\n                  <>\n                    {isPostsLoading && (\n                      <Loader />\n                    )}\n\n                    {isPostsLoadingError && (\n                      <div\n                        className=\"notification is-danger\"\n                        data-cy=\"PostsLoadingError\"\n                      >\n                        Something went wrong!\n                      </div>\n                    )}\n\n                    {!isPostsLoadingError && !isPostsLoading && (\n                      <>\n                        {!posts.length ? (\n                          <div\n                            className=\"notification is-warning\"\n                            data-cy=\"NoPostsYet\"\n                          >\n                            No posts yet\n                          </div>\n                        ) : (\n                          <PostsList\n                            posts={posts}\n                            chosenPost={chosenPost}\n                            setChosenPost={setChosenPost}\n                          />\n                        )}\n                      </>\n                    )}\n                  </>\n                )}\n\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': chosenPost },\n            )}\n          >\n            {chosenPost && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails chosenPost={chosenPost} />\n              </div>\n            )}\n          </div>\n\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport function getUsers() {\n  return client.get<User[]>('/users');\n}\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport function getUserPosts(userId: number) {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n}\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}